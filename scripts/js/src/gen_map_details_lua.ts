// Script generating mapDetails.lua used in BYAR-Chobby repo for maps list.

import { fetchMapsMetadata, readMapList } from './maps_metadata.js';
import fs from 'node:fs/promises';
import { program } from '@commander-js/extra-typings';
import { MapList } from '../../../gen/types/map_list.js';

export interface MapDetails {
    [k: string]: {
        Width: number;
        Height: number;
        Is1v1?: number;
        IsTeam?: number;
        IsFFA?: number;
        IsCertified?: number;
        Special?: string;
        Flat?: number;
        Hills?: number;
        Water?: number;
        IsInPool?: number;
        PlayerCount?: string;
        TeamCount?: string;
        Author?: string;
        InfoText?: string;
        LastUpdate: number;
    };
}

function intersection<T>(a: Iterable<T>, b: Iterable<T>): T[] {
    const setB = b instanceof Set ? b as Set<T> : new Set(b);
    const intersection = [];
    for (const elem of a) {
        if (setB.has(elem)) {
            intersection.push(elem);
        }
    }
    return intersection;
}

function buildMapDetails(maps: MapList, mapsMetadata: Map<string, any>): MapDetails {
    const mapDetails: MapDetails = {};
    for (const id of Object.keys(maps)) {
        const mapInfo = maps[id];
        const meta = mapsMetadata.get(id);

        const isWater = intersection(mapInfo.terrain, ['sea', 'water']).length > 0;

        mapDetails[mapInfo.springName] = {
            Width: meta.smf.mapWidth / 64,
            Height: meta.smf.mapHeight / 64,
            Is1v1: mapInfo.gameType.includes('1v1') ? 1 : undefined,
            IsTeam: mapInfo.gameType.includes('team') ? 1 : undefined,
            IsFFA: mapInfo.gameType.includes('ffa') ? 1 : undefined,
            IsCertified: mapInfo.certified ? 1 : undefined,
            Special: mapInfo.special,
            Flat: mapInfo.terrain.includes('flat') ? 1 : undefined,
            Hills: mapInfo.terrain.includes('hills') ? 1 : undefined,
            Water: isWater ? 1 : undefined,
            IsInPool: mapInfo.inPool ? 1 : undefined,
            PlayerCount: mapInfo.playerCount ? mapInfo.playerCount.toString() : undefined,
            TeamCount: mapInfo.teamCount ? mapInfo.teamCount.toString() : undefined,
            Author: mapInfo.author != 'UNKNOWN' ? mapInfo.author : undefined,
            InfoText: mapInfo.description,
            LastUpdate: Math.round(mapInfo.photo[0].lastModifiedTS / 1000),
        }
    }
    return mapDetails;
}

function serializeMapDetails(mapDetails: MapDetails): string {
    const fieldsOrder = [
        'Width',
        'Height',
        'Is1v1',
        'IsTeam',
        'IsFFA',
        'IsCertified',
        'Special',
        'Flat',
        'Hills',
        'Water',
        'IsInPool',
        'PlayerCount',
        'TeamCount',
        'Author',
        'InfoText',
        'LastUpdate'
    ];

    function escapeLuaString(str: string): string {
        return str
            .replaceAll('\\', '\\\\')
            .replaceAll('\r', '')
            .replaceAll('\n', '\\n')
            .replaceAll('\'', '\\\'');
    }

    const lines: string[] = [
        '--',
        '-- AUTOMATICALLY GENERATED FILE, DO NOT EDIT!',
        '--',
        '-- This file is automatically generated from the beyond-all-reason/maps-metadata repository and any',
        '-- changes here will be overridden by the next update. If you want to make any changes please follow',
        '-- https://github.com/beyond-all-reason/maps-metadata/wiki/Adding-a-created-map-to-the-game',
        '--',
        '',
        'return {'
    ];
    const springNames = Object.keys(mapDetails);
    springNames.sort((a, b) => a.localeCompare(b, 'en-US'));
    for (const springName of springNames) {
        const details: any = mapDetails[springName];
        const fields: string[] = [];
        for (const field of fieldsOrder) {
            let value: string;
            if (details[field] === undefined) {
                value = 'nil';
            } else if (typeof details[field] === 'number') {
                value = details[field].toString();
            } else {
                value = `'${escapeLuaString(details[field].toString())}'`;
            }
            if (field !== 'Author' || value !== 'nil') {
                fields.push(`${field}=${value}`);
            }
        }
        lines.push(`['${escapeLuaString(springName)}']={${fields.join(', ')}},`);
    }
    lines.push('}\n');
    return lines.join('\n');
}

const prog = program
    .argument('<mapDetails>', 'Map details output.')
    .parse();
const [mapDetailsPath] = prog.processedArgs;

const maps = await readMapList();

await fs.writeFile(mapDetailsPath,
    serializeMapDetails(
        buildMapDetails(maps, await fetchMapsMetadata(maps))));
